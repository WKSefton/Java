package Solution;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.ListIterator;

/**
 * This program demonstrates the LinkedList class. It is a modification of the
 * program from Chapter 15 section 2 of BJLO
 */
public class ListDemo {
	// using a generic linked list to store word pairs
	// declaring here for testing purposes
	// static LinkedList<WordPair> wpLinkedList = new LinkedList<WordPair>();

	public static void main(String[] args) {
		// using a generic linked list to store word pairs
		// declaring here for testing purposes
		LinkedList<WordPair> wpLinkedList = new LinkedList<WordPair>();
		/*
		 * Initialize some word pairs to use in testing
		 */
		WordPair pair1 = new WordPair("avec=with");
		WordPair pair2 = new WordPair("moi=I, me");
		WordPair pair3 = new WordPair("si=yes; if; so, such");
		WordPair pair4 = new WordPair("quoi=what");
		WordPair pair5 = new WordPair("devoir=to have to, must; duty, test");
		WordPair pair6 = new WordPair("avec=with");
		WordPair pair7 = new WordPair("oui=yes");
		wpLinkedList.addLast(pair1);
		wpLinkedList.addLast(pair2);
		wpLinkedList.addLast(pair3);
		wpLinkedList.addLast(pair4);
		/*
		 * staff.addLast(pair5); staff.addLast(pair6); staff.addLast(pair7);
		 * staff.addLast(pair7);
		 */

		ListIterator<WordPair> iterator = wpLinkedList.listIterator(); // node
																		// pointer
		// at front
		iterator.next(); // pair1|pair2,pair3,pair4 (node pointer between pair1
							// and pair2)
		iterator.next(); // pair1,pair2|pair3,pair4 (node pointer between pair2
							// and pair3)

		// Add more elements after second element

		iterator.add(pair5); // pair1,pair2,pair5|pair3,pair4
		iterator.add(pair6); // pair1,pair2,pair5,pair6|pair3,pair4

		iterator.next(); // pair1,pair2,pair5,pair6,pair3| pair4

		// Remove last traversed element so pair3 is gone

		iterator.remove(); // pair1,pair2,pair5,pair6|pair4

		// Print all elements

		System.out.println(wpLinkedList.toString());
		System.out.println("Now sort the word list");
		Collections.sort(wpLinkedList, new WordPair());
		System.out.println(wpLinkedList.toString());
		System.out.println("Now make an ArrayList from the LinkedList");
		ArrayList<WordPair> wpArrayList = new ArrayList<WordPair>(wpLinkedList);
		System.out.println(wpArrayList.toString());
		System.out.println("Now add the LinkedList to the ArrayList");
		wpArrayList.addAll(wpLinkedList);
		System.out.println(wpArrayList.toString());
		System.out.println("Now sort the ArrayList");
		Collections.sort(wpArrayList, new WordPair());
		System.out.println(wpArrayList.toString());
		// now add code (can be a method) to determine if two link lists are the
		// same

		// add code to remove duplicated from the ArrayList wpArrayList
	}

}
